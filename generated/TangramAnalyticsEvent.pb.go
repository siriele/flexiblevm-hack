// Code generated by protoc-gen-go.
// source: TangramAnalyticsEvent.proto
// DO NOT EDIT!

package generated

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Tangram session event
type TangramSessionEvent struct {
	LastDifficulty       *int32 `protobuf:"varint,1,opt,name=last_difficulty,json=lastDifficulty" json:"last_difficulty,omitempty"`
	NumStartedTreasure   *int32 `protobuf:"varint,2,opt,name=num_started_treasure,json=numStartedTreasure" json:"num_started_treasure,omitempty"`
	NumSolvedTreasure    *int32 `protobuf:"varint,3,opt,name=num_solved_treasure,json=numSolvedTreasure" json:"num_solved_treasure,omitempty"`
	NumAbandonedTreasure *int32 `protobuf:"varint,4,opt,name=num_abandoned_treasure,json=numAbandonedTreasure" json:"num_abandoned_treasure,omitempty"`
	NumStartedClassic    *int32 `protobuf:"varint,5,opt,name=num_started_classic,json=numStartedClassic" json:"num_started_classic,omitempty"`
	NumSolvedClassic     *int32 `protobuf:"varint,6,opt,name=num_solved_classic,json=numSolvedClassic" json:"num_solved_classic,omitempty"`
	NumAbandonedClassic  *int32 `protobuf:"varint,7,opt,name=num_abandoned_classic,json=numAbandonedClassic" json:"num_abandoned_classic,omitempty"`
	NumStartedAcademy    *int32 `protobuf:"varint,8,opt,name=num_started_academy,json=numStartedAcademy" json:"num_started_academy,omitempty"`
	NumSolvedAcademy     *int32 `protobuf:"varint,9,opt,name=num_solved_academy,json=numSolvedAcademy" json:"num_solved_academy,omitempty"`
	XXX_unrecognized     []byte `json:"-"`
}

func (m *TangramSessionEvent) Reset()                    { *m = TangramSessionEvent{} }
func (m *TangramSessionEvent) String() string            { return proto.CompactTextString(m) }
func (*TangramSessionEvent) ProtoMessage()               {}
func (*TangramSessionEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *TangramSessionEvent) GetLastDifficulty() int32 {
	if m != nil && m.LastDifficulty != nil {
		return *m.LastDifficulty
	}
	return 0
}

func (m *TangramSessionEvent) GetNumStartedTreasure() int32 {
	if m != nil && m.NumStartedTreasure != nil {
		return *m.NumStartedTreasure
	}
	return 0
}

func (m *TangramSessionEvent) GetNumSolvedTreasure() int32 {
	if m != nil && m.NumSolvedTreasure != nil {
		return *m.NumSolvedTreasure
	}
	return 0
}

func (m *TangramSessionEvent) GetNumAbandonedTreasure() int32 {
	if m != nil && m.NumAbandonedTreasure != nil {
		return *m.NumAbandonedTreasure
	}
	return 0
}

func (m *TangramSessionEvent) GetNumStartedClassic() int32 {
	if m != nil && m.NumStartedClassic != nil {
		return *m.NumStartedClassic
	}
	return 0
}

func (m *TangramSessionEvent) GetNumSolvedClassic() int32 {
	if m != nil && m.NumSolvedClassic != nil {
		return *m.NumSolvedClassic
	}
	return 0
}

func (m *TangramSessionEvent) GetNumAbandonedClassic() int32 {
	if m != nil && m.NumAbandonedClassic != nil {
		return *m.NumAbandonedClassic
	}
	return 0
}

func (m *TangramSessionEvent) GetNumStartedAcademy() int32 {
	if m != nil && m.NumStartedAcademy != nil {
		return *m.NumStartedAcademy
	}
	return 0
}

func (m *TangramSessionEvent) GetNumSolvedAcademy() int32 {
	if m != nil && m.NumSolvedAcademy != nil {
		return *m.NumSolvedAcademy
	}
	return 0
}

var E_TangramSessionEvent_Tangram = &proto.ExtensionDesc{
	ExtendedType:  (*SessionEvent)(nil),
	ExtensionType: (*TangramSessionEvent)(nil),
	Field:         1000,
	Name:          "generated.TangramSessionEvent.tangram",
	Tag:           "bytes,1000,opt,name=tangram",
}

// Tangram level start event
type TangramLevelEvent struct {
	// identifying information
	Category   *string `protobuf:"bytes,1,opt,name=category" json:"category,omitempty"`
	Shape      *string `protobuf:"bytes,2,opt,name=shape" json:"shape,omitempty"`
	Difficulty *int32  `protobuf:"varint,3,opt,name=difficulty" json:"difficulty,omitempty"`
	CastleId   *string `protobuf:"bytes,4,opt,name=castle_id,json=castleId" json:"castle_id,omitempty"`
	Mode       *string `protobuf:"bytes,5,opt,name=mode" json:"mode,omitempty"`
	IntroLevel *int32  `protobuf:"varint,6,opt,name=intro_level,json=introLevel" json:"intro_level,omitempty"`
	// stats about what happened in the level
	HintsUsed               *int32   `protobuf:"varint,7,opt,name=hints_used,json=hintsUsed" json:"hints_used,omitempty"`
	FovHintsShown           *int32   `protobuf:"varint,8,opt,name=fov_hints_shown,json=fovHintsShown" json:"fov_hints_shown,omitempty"`
	FovHintSec              *float32 `protobuf:"fixed32,9,opt,name=fov_hint_sec,json=fovHintSec" json:"fov_hint_sec,omitempty"`
	TableHintsShown         *int32   `protobuf:"varint,10,opt,name=table_hints_shown,json=tableHintsShown" json:"table_hints_shown,omitempty"`
	ParallelogramHintsShown *int32   `protobuf:"varint,11,opt,name=parallelogram_hints_shown,json=parallelogramHintsShown" json:"parallelogram_hints_shown,omitempty"`
	XXX_unrecognized        []byte   `json:"-"`
}

func (m *TangramLevelEvent) Reset()                    { *m = TangramLevelEvent{} }
func (m *TangramLevelEvent) String() string            { return proto.CompactTextString(m) }
func (*TangramLevelEvent) ProtoMessage()               {}
func (*TangramLevelEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *TangramLevelEvent) GetCategory() string {
	if m != nil && m.Category != nil {
		return *m.Category
	}
	return ""
}

func (m *TangramLevelEvent) GetShape() string {
	if m != nil && m.Shape != nil {
		return *m.Shape
	}
	return ""
}

func (m *TangramLevelEvent) GetDifficulty() int32 {
	if m != nil && m.Difficulty != nil {
		return *m.Difficulty
	}
	return 0
}

func (m *TangramLevelEvent) GetCastleId() string {
	if m != nil && m.CastleId != nil {
		return *m.CastleId
	}
	return ""
}

func (m *TangramLevelEvent) GetMode() string {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return ""
}

func (m *TangramLevelEvent) GetIntroLevel() int32 {
	if m != nil && m.IntroLevel != nil {
		return *m.IntroLevel
	}
	return 0
}

func (m *TangramLevelEvent) GetHintsUsed() int32 {
	if m != nil && m.HintsUsed != nil {
		return *m.HintsUsed
	}
	return 0
}

func (m *TangramLevelEvent) GetFovHintsShown() int32 {
	if m != nil && m.FovHintsShown != nil {
		return *m.FovHintsShown
	}
	return 0
}

func (m *TangramLevelEvent) GetFovHintSec() float32 {
	if m != nil && m.FovHintSec != nil {
		return *m.FovHintSec
	}
	return 0
}

func (m *TangramLevelEvent) GetTableHintsShown() int32 {
	if m != nil && m.TableHintsShown != nil {
		return *m.TableHintsShown
	}
	return 0
}

func (m *TangramLevelEvent) GetParallelogramHintsShown() int32 {
	if m != nil && m.ParallelogramHintsShown != nil {
		return *m.ParallelogramHintsShown
	}
	return 0
}

var E_TangramLevelEvent_Tangram = &proto.ExtensionDesc{
	ExtendedType:  (*LevelEvent)(nil),
	ExtensionType: (*TangramLevelEvent)(nil),
	Field:         1000,
	Name:          "generated.TangramLevelEvent.tangram",
	Tag:           "bytes,1000,opt,name=tangram",
}

// Tangram specific per device properties
type TangramUserProperties struct {
	LastDifficulty          *int32   `protobuf:"varint,1,opt,name=last_difficulty,json=lastDifficulty" json:"last_difficulty,omitempty"`
	HintsUsed               *int32   `protobuf:"varint,2,opt,name=hints_used,json=hintsUsed" json:"hints_used,omitempty"`
	FovHintsShown           *int32   `protobuf:"varint,3,opt,name=fov_hints_shown,json=fovHintsShown" json:"fov_hints_shown,omitempty"`
	FovHintSec              *float32 `protobuf:"fixed32,4,opt,name=fov_hint_sec,json=fovHintSec" json:"fov_hint_sec,omitempty"`
	TableHintsShown         *int32   `protobuf:"varint,5,opt,name=table_hints_shown,json=tableHintsShown" json:"table_hints_shown,omitempty"`
	ParallelogramHintsShown *int32   `protobuf:"varint,6,opt,name=parallelogram_hints_shown,json=parallelogramHintsShown" json:"parallelogram_hints_shown,omitempty"`
	XXX_unrecognized        []byte   `json:"-"`
}

func (m *TangramUserProperties) Reset()                    { *m = TangramUserProperties{} }
func (m *TangramUserProperties) String() string            { return proto.CompactTextString(m) }
func (*TangramUserProperties) ProtoMessage()               {}
func (*TangramUserProperties) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *TangramUserProperties) GetLastDifficulty() int32 {
	if m != nil && m.LastDifficulty != nil {
		return *m.LastDifficulty
	}
	return 0
}

func (m *TangramUserProperties) GetHintsUsed() int32 {
	if m != nil && m.HintsUsed != nil {
		return *m.HintsUsed
	}
	return 0
}

func (m *TangramUserProperties) GetFovHintsShown() int32 {
	if m != nil && m.FovHintsShown != nil {
		return *m.FovHintsShown
	}
	return 0
}

func (m *TangramUserProperties) GetFovHintSec() float32 {
	if m != nil && m.FovHintSec != nil {
		return *m.FovHintSec
	}
	return 0
}

func (m *TangramUserProperties) GetTableHintsShown() int32 {
	if m != nil && m.TableHintsShown != nil {
		return *m.TableHintsShown
	}
	return 0
}

func (m *TangramUserProperties) GetParallelogramHintsShown() int32 {
	if m != nil && m.ParallelogramHintsShown != nil {
		return *m.ParallelogramHintsShown
	}
	return 0
}

var E_TangramUserProperties_Tangram = &proto.ExtensionDesc{
	ExtendedType:  (*UserProperties)(nil),
	ExtensionType: (*TangramUserProperties)(nil),
	Field:         1000,
	Name:          "generated.TangramUserProperties.tangram",
	Tag:           "bytes,1000,opt,name=tangram",
}

// Tangram player state
type TangramPlayerState struct {
	TreasureAchievementsCompleted *int32 `protobuf:"varint,1,opt,name=treasure_achievements_completed,json=treasureAchievementsCompleted" json:"treasure_achievements_completed,omitempty"`
	ClassicAchievementsCompleted  *int32 `protobuf:"varint,2,opt,name=classic_achievements_completed,json=classicAchievementsCompleted" json:"classic_achievements_completed,omitempty"`
	SharedAchievementsCompleted   *int32 `protobuf:"varint,3,opt,name=shared_achievements_completed,json=sharedAchievementsCompleted" json:"shared_achievements_completed,omitempty"`
	BeatIntro                     *bool  `protobuf:"varint,4,opt,name=beat_intro,json=beatIntro" json:"beat_intro,omitempty"`
	IntroLevel                    *int32 `protobuf:"varint,5,opt,name=intro_level,json=introLevel" json:"intro_level,omitempty"`
	CurrentHints                  *int32 `protobuf:"varint,6,opt,name=current_hints,json=currentHints" json:"current_hints,omitempty"`
	TreasureHints                 *int32 `protobuf:"varint,7,opt,name=treasure_hints,json=treasureHints" json:"treasure_hints,omitempty"`
	TreasureHintsTotal            *int32 `protobuf:"varint,8,opt,name=treasure_hints_total,json=treasureHintsTotal" json:"treasure_hints_total,omitempty"`
	// number of puzzles solved at each difficulty level in classic mode
	ClassicSolved0 *int32 `protobuf:"varint,9,opt,name=classic_solved0,json=classicSolved0" json:"classic_solved0,omitempty"`
	ClassicSolved1 *int32 `protobuf:"varint,10,opt,name=classic_solved1,json=classicSolved1" json:"classic_solved1,omitempty"`
	ClassicSolved2 *int32 `protobuf:"varint,11,opt,name=classic_solved2,json=classicSolved2" json:"classic_solved2,omitempty"`
	ClassicSolved3 *int32 `protobuf:"varint,12,opt,name=classic_solved3,json=classicSolved3" json:"classic_solved3,omitempty"`
	// number of puzzles solved at each difficulty level in the new treasure mode
	TreasureSolved0           *int32 `protobuf:"varint,13,opt,name=treasure_solved0,json=treasureSolved0" json:"treasure_solved0,omitempty"`
	TreasureSolved1           *int32 `protobuf:"varint,14,opt,name=treasure_solved1,json=treasureSolved1" json:"treasure_solved1,omitempty"`
	TreasureSolved2           *int32 `protobuf:"varint,15,opt,name=treasure_solved2,json=treasureSolved2" json:"treasure_solved2,omitempty"`
	TreasureSolved3           *int32 `protobuf:"varint,16,opt,name=treasure_solved3,json=treasureSolved3" json:"treasure_solved3,omitempty"`
	TreasureSolvedUnique      *int32 `protobuf:"varint,17,opt,name=treasure_solved_unique,json=treasureSolvedUnique" json:"treasure_solved_unique,omitempty"`
	CastlesCompletedUnique    *int32 `protobuf:"varint,18,opt,name=castles_completed_unique,json=castlesCompletedUnique" json:"castles_completed_unique,omitempty"`
	BigCastlesCompletedUnique *int32 `protobuf:"varint,19,opt,name=big_castles_completed_unique,json=bigCastlesCompletedUnique" json:"big_castles_completed_unique,omitempty"`
	TreasuresCollectedUnique  *int32 `protobuf:"varint,20,opt,name=treasures_collected_unique,json=treasuresCollectedUnique" json:"treasures_collected_unique,omitempty"`
	PeopleRescuedUnique       *int32 `protobuf:"varint,21,opt,name=people_rescued_unique,json=peopleRescuedUnique" json:"people_rescued_unique,omitempty"`
	HasEnteredCastle          *bool  `protobuf:"varint,22,opt,name=has_entered_castle,json=hasEnteredCastle" json:"has_entered_castle,omitempty"`
	RescuedHomeless           *int32 `protobuf:"varint,23,opt,name=rescued_homeless,json=rescuedHomeless" json:"rescued_homeless,omitempty"`
	ClassicEnabled            *bool  `protobuf:"varint,24,opt,name=classic_enabled,json=classicEnabled" json:"classic_enabled,omitempty"`
	XXX_unrecognized          []byte `json:"-"`
}

func (m *TangramPlayerState) Reset()                    { *m = TangramPlayerState{} }
func (m *TangramPlayerState) String() string            { return proto.CompactTextString(m) }
func (*TangramPlayerState) ProtoMessage()               {}
func (*TangramPlayerState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *TangramPlayerState) GetTreasureAchievementsCompleted() int32 {
	if m != nil && m.TreasureAchievementsCompleted != nil {
		return *m.TreasureAchievementsCompleted
	}
	return 0
}

func (m *TangramPlayerState) GetClassicAchievementsCompleted() int32 {
	if m != nil && m.ClassicAchievementsCompleted != nil {
		return *m.ClassicAchievementsCompleted
	}
	return 0
}

func (m *TangramPlayerState) GetSharedAchievementsCompleted() int32 {
	if m != nil && m.SharedAchievementsCompleted != nil {
		return *m.SharedAchievementsCompleted
	}
	return 0
}

func (m *TangramPlayerState) GetBeatIntro() bool {
	if m != nil && m.BeatIntro != nil {
		return *m.BeatIntro
	}
	return false
}

func (m *TangramPlayerState) GetIntroLevel() int32 {
	if m != nil && m.IntroLevel != nil {
		return *m.IntroLevel
	}
	return 0
}

func (m *TangramPlayerState) GetCurrentHints() int32 {
	if m != nil && m.CurrentHints != nil {
		return *m.CurrentHints
	}
	return 0
}

func (m *TangramPlayerState) GetTreasureHints() int32 {
	if m != nil && m.TreasureHints != nil {
		return *m.TreasureHints
	}
	return 0
}

func (m *TangramPlayerState) GetTreasureHintsTotal() int32 {
	if m != nil && m.TreasureHintsTotal != nil {
		return *m.TreasureHintsTotal
	}
	return 0
}

func (m *TangramPlayerState) GetClassicSolved0() int32 {
	if m != nil && m.ClassicSolved0 != nil {
		return *m.ClassicSolved0
	}
	return 0
}

func (m *TangramPlayerState) GetClassicSolved1() int32 {
	if m != nil && m.ClassicSolved1 != nil {
		return *m.ClassicSolved1
	}
	return 0
}

func (m *TangramPlayerState) GetClassicSolved2() int32 {
	if m != nil && m.ClassicSolved2 != nil {
		return *m.ClassicSolved2
	}
	return 0
}

func (m *TangramPlayerState) GetClassicSolved3() int32 {
	if m != nil && m.ClassicSolved3 != nil {
		return *m.ClassicSolved3
	}
	return 0
}

func (m *TangramPlayerState) GetTreasureSolved0() int32 {
	if m != nil && m.TreasureSolved0 != nil {
		return *m.TreasureSolved0
	}
	return 0
}

func (m *TangramPlayerState) GetTreasureSolved1() int32 {
	if m != nil && m.TreasureSolved1 != nil {
		return *m.TreasureSolved1
	}
	return 0
}

func (m *TangramPlayerState) GetTreasureSolved2() int32 {
	if m != nil && m.TreasureSolved2 != nil {
		return *m.TreasureSolved2
	}
	return 0
}

func (m *TangramPlayerState) GetTreasureSolved3() int32 {
	if m != nil && m.TreasureSolved3 != nil {
		return *m.TreasureSolved3
	}
	return 0
}

func (m *TangramPlayerState) GetTreasureSolvedUnique() int32 {
	if m != nil && m.TreasureSolvedUnique != nil {
		return *m.TreasureSolvedUnique
	}
	return 0
}

func (m *TangramPlayerState) GetCastlesCompletedUnique() int32 {
	if m != nil && m.CastlesCompletedUnique != nil {
		return *m.CastlesCompletedUnique
	}
	return 0
}

func (m *TangramPlayerState) GetBigCastlesCompletedUnique() int32 {
	if m != nil && m.BigCastlesCompletedUnique != nil {
		return *m.BigCastlesCompletedUnique
	}
	return 0
}

func (m *TangramPlayerState) GetTreasuresCollectedUnique() int32 {
	if m != nil && m.TreasuresCollectedUnique != nil {
		return *m.TreasuresCollectedUnique
	}
	return 0
}

func (m *TangramPlayerState) GetPeopleRescuedUnique() int32 {
	if m != nil && m.PeopleRescuedUnique != nil {
		return *m.PeopleRescuedUnique
	}
	return 0
}

func (m *TangramPlayerState) GetHasEnteredCastle() bool {
	if m != nil && m.HasEnteredCastle != nil {
		return *m.HasEnteredCastle
	}
	return false
}

func (m *TangramPlayerState) GetRescuedHomeless() int32 {
	if m != nil && m.RescuedHomeless != nil {
		return *m.RescuedHomeless
	}
	return 0
}

func (m *TangramPlayerState) GetClassicEnabled() bool {
	if m != nil && m.ClassicEnabled != nil {
		return *m.ClassicEnabled
	}
	return false
}

var E_TangramPlayerState_Tangram = &proto.ExtensionDesc{
	ExtendedType:  (*PlayerState)(nil),
	ExtensionType: (*TangramPlayerState)(nil),
	Field:         1000,
	Name:          "generated.TangramPlayerState.tangram",
	Tag:           "bytes,1000,opt,name=tangram",
}

func init() {
	proto.RegisterType((*TangramSessionEvent)(nil), "generated.TangramSessionEvent")
	proto.RegisterType((*TangramLevelEvent)(nil), "generated.TangramLevelEvent")
	proto.RegisterType((*TangramUserProperties)(nil), "generated.TangramUserProperties")
	proto.RegisterType((*TangramPlayerState)(nil), "generated.TangramPlayerState")
	proto.RegisterExtension(E_TangramSessionEvent_Tangram)
	proto.RegisterExtension(E_TangramLevelEvent_Tangram)
	proto.RegisterExtension(E_TangramUserProperties_Tangram)
	proto.RegisterExtension(E_TangramPlayerState_Tangram)
}

func init() { proto.RegisterFile("TangramAnalyticsEvent.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 960 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x96, 0xe9, 0x4e, 0xe4, 0x46,
	0x10, 0xc7, 0xb5, 0xc0, 0xec, 0xe2, 0xe2, 0x1a, 0x9a, 0xab, 0x39, 0x17, 0x6d, 0x94, 0x53, 0x11,
	0x02, 0x93, 0x0f, 0x51, 0x14, 0x29, 0x02, 0x96, 0x68, 0x57, 0x8a, 0x22, 0x64, 0xd8, 0x7c, 0xb5,
	0x1a, 0xbb, 0x61, 0x2c, 0x79, 0xdc, 0x93, 0x76, 0x9b, 0x88, 0x57, 0xc9, 0x93, 0xe5, 0x11, 0x12,
	0xe5, 0x25, 0xd2, 0xa7, 0xdd, 0x1e, 0x7b, 0xa3, 0xd1, 0x7e, 0x63, 0xaa, 0x7e, 0xff, 0x72, 0x51,
	0x97, 0x0d, 0xfb, 0x77, 0xa4, 0x78, 0xe4, 0x64, 0x7c, 0x51, 0x90, 0xfc, 0x59, 0x64, 0x49, 0x79,
	0xfd, 0x44, 0x0b, 0x71, 0x32, 0xe1, 0x4c, 0x30, 0x14, 0x3c, 0xd2, 0x82, 0x72, 0x22, 0x68, 0xba,
	0xb7, 0xd9, 0x07, 0xbc, 0xf9, 0x73, 0x01, 0x36, 0x6c, 0x80, 0x5b, 0x5a, 0x96, 0x19, 0x2b, 0xb4,
	0x17, 0x7d, 0x09, 0x6b, 0x39, 0x29, 0x45, 0x9c, 0x66, 0x0f, 0x0f, 0x59, 0x52, 0xe5, 0xe2, 0x19,
	0xbf, 0x38, 0x7e, 0xf1, 0xd5, 0x20, 0x5a, 0x55, 0xe6, 0xb7, 0xb5, 0x15, 0x9d, 0xc2, 0x66, 0x51,
	0x8d, 0xe3, 0x52, 0x10, 0x2e, 0x9f, 0x12, 0x0b, 0x4e, 0x49, 0x59, 0x71, 0x8a, 0xe7, 0x34, 0x8d,
	0xa4, 0xef, 0xd6, 0xb8, 0xee, 0xac, 0x07, 0x9d, 0xc0, 0x86, 0x56, 0xb0, 0xfc, 0xc9, 0x17, 0xcc,
	0x6b, 0xc1, 0xba, 0x12, 0x68, 0x4f, 0xcd, 0x7f, 0x07, 0xdb, 0x8a, 0x27, 0xf7, 0xa4, 0x48, 0x59,
	0xe1, 0x4b, 0x16, 0xb4, 0x44, 0x3d, 0xff, 0xc2, 0x39, 0x3b, 0x4f, 0xb1, 0x79, 0x25, 0x32, 0xed,
	0x32, 0x4b, 0xf0, 0xa0, 0x79, 0x8a, 0xf1, 0x5c, 0x19, 0x07, 0xfa, 0x16, 0x90, 0x97, 0x95, 0xc3,
	0x5f, 0x6a, 0x7c, 0x58, 0x27, 0xe5, 0xe8, 0x10, 0xb6, 0xda, 0x39, 0x39, 0xc1, 0x2b, 0x2d, 0xd8,
	0xf0, 0x53, 0x72, 0x9a, 0xa9, 0x8c, 0x48, 0x42, 0x52, 0x3a, 0x7e, 0xc6, 0x8b, 0xd3, 0x19, 0x5d,
	0x18, 0xc7, 0x54, 0x46, 0x0e, 0x0f, 0xa6, 0x32, 0xb2, 0x74, 0x18, 0xc1, 0x2b, 0x61, 0xfa, 0x88,
	0x76, 0x4e, 0xea, 0xae, 0x9f, 0xf8, 0x4d, 0xc5, 0x7f, 0xab, 0xec, 0x96, 0xc2, 0x23, 0xcf, 0xdf,
	0xd3, 0xfb, 0xc8, 0x05, 0x7a, 0xf3, 0xd7, 0x3c, 0xac, 0x5b, 0xe0, 0x17, 0xfa, 0x44, 0x73, 0x33,
	0x1a, 0x7b, 0xb0, 0x98, 0x48, 0xed, 0x23, 0xe3, 0x66, 0x26, 0x82, 0xa8, 0xfe, 0x8d, 0x36, 0x61,
	0x50, 0x8e, 0xc8, 0xc4, 0xb4, 0x3f, 0x88, 0xcc, 0x0f, 0x74, 0x04, 0xe0, 0xcd, 0x91, 0x69, 0xb4,
	0x67, 0x41, 0xfb, 0x10, 0x24, 0x72, 0xaa, 0x72, 0x1a, 0x67, 0xa9, 0x6e, 0xaa, 0x0e, 0xa9, 0x0c,
	0xef, 0x53, 0x84, 0x60, 0x61, 0xcc, 0x52, 0xaa, 0x3b, 0x17, 0x44, 0xfa, 0x6f, 0xf4, 0x1a, 0x96,
	0xb2, 0x42, 0x70, 0x16, 0xe7, 0x2a, 0x2d, 0xdb, 0x25, 0xd0, 0x26, 0x9d, 0x28, 0x3a, 0x04, 0x18,
	0xc9, 0x9f, 0x65, 0x5c, 0x95, 0x34, 0xb5, 0x4d, 0x09, 0xb4, 0xe5, 0x83, 0x34, 0xa0, 0x2f, 0x60,
	0xed, 0x81, 0x3d, 0xc5, 0x06, 0x29, 0x47, 0xec, 0x8f, 0xc2, 0xb6, 0x61, 0x45, 0x9a, 0xdf, 0x29,
	0xeb, 0xad, 0x32, 0xa2, 0x63, 0x58, 0x76, 0x5c, 0x5c, 0xd2, 0x44, 0x17, 0x7f, 0x2e, 0x02, 0x0b,
	0xdd, 0xd2, 0x04, 0x7d, 0x03, 0xeb, 0x82, 0xdc, 0xcb, 0xcc, 0xfd, 0x58, 0xa0, 0x63, 0xad, 0x69,
	0x87, 0x17, 0xed, 0x07, 0xd8, 0x9d, 0x10, 0x4e, 0xf2, 0x9c, 0xe6, 0x4c, 0xd5, 0xb4, 0xa5, 0x59,
	0xd2, 0x9a, 0x9d, 0x16, 0xd0, 0x68, 0xc3, 0x5f, 0x9b, 0xf6, 0x6e, 0x79, 0xed, 0x6b, 0xda, 0xe2,
	0x9a, 0x7b, 0xd0, 0x6d, 0x6e, 0x03, 0x35, 0xad, 0xfd, 0x67, 0x0e, 0xb6, 0xac, 0x5b, 0x56, 0x84,
	0xdf, 0x70, 0x36, 0xa1, 0x5c, 0x64, 0xb4, 0x9c, 0x7d, 0xf3, 0xdb, 0x35, 0x9e, 0x9b, 0xa1, 0xc6,
	0xf3, 0xb3, 0xd4, 0x78, 0x61, 0xb6, 0x1a, 0x0f, 0x3e, 0xa1, 0xc6, 0x2f, 0xff, 0xbf, 0xc6, 0xbf,
	0x35, 0x35, 0xde, 0xf5, 0xaa, 0xd8, 0xae, 0x8f, 0xab, 0xf3, 0x71, 0xb7, 0xce, 0x6d, 0xb0, 0xa9,
	0xf5, 0xbf, 0x01, 0x20, 0x8b, 0xdc, 0xe4, 0xe4, 0x99, 0x72, 0xb9, 0xe8, 0x82, 0xa2, 0x9f, 0xe1,
	0xb5, 0xbb, 0x64, 0x72, 0xbb, 0x47, 0x99, 0xec, 0xd2, 0x98, 0xaa, 0x64, 0x13, 0x36, 0x9e, 0xe4,
	0x54, 0x06, 0xb6, 0x85, 0x3f, 0x74, 0xd8, 0x85, 0x47, 0x5d, 0x39, 0x08, 0xbd, 0x85, 0x23, 0x7b,
	0x7d, 0x3e, 0x16, 0xc6, 0xf4, 0xe6, 0xc0, 0x52, 0xfd, 0x51, 0x2e, 0xe1, 0x50, 0x2e, 0x2b, 0xd7,
	0x97, 0xa6, 0x37, 0x88, 0x69, 0xde, 0xbe, 0x81, 0xfa, 0x63, 0xc8, 0x89, 0xb8, 0xa7, 0x44, 0xc4,
	0x7a, 0x11, 0x75, 0x23, 0x17, 0xa3, 0x40, 0x59, 0xde, 0x2b, 0xc3, 0xf4, 0xd6, 0x0e, 0x3a, 0x5b,
	0xfb, 0x19, 0xac, 0x24, 0x15, 0xe7, 0x32, 0xa8, 0x69, 0x9b, 0x6d, 0xd8, 0xb2, 0x35, 0xea, 0x56,
	0xa1, 0xcf, 0x61, 0xb5, 0x2e, 0x9b, 0xa1, 0xcc, 0x7a, 0xaf, 0x38, 0xab, 0xc1, 0xe4, 0x7b, 0xa9,
	0x8d, 0xc5, 0x82, 0x09, 0x92, 0xdb, 0x3d, 0x47, 0x2d, 0xf8, 0x4e, 0x79, 0xd4, 0xe0, 0xbb, 0x3a,
	0x9a, 0x9b, 0x7b, 0x6a, 0x8f, 0xed, 0xaa, 0x35, 0x9b, 0x83, 0x7b, 0xda, 0x05, 0xcf, 0xec, 0xc6,
	0xb7, 0xc1, 0xb3, 0x2e, 0x18, 0xda, 0x35, 0x6f, 0x83, 0x61, 0x17, 0x3c, 0xc7, 0xcb, 0x3d, 0xe0,
	0x39, 0xfa, 0x1a, 0x86, 0xf5, 0x7f, 0xe5, 0x92, 0x5c, 0xb1, 0x9b, 0x60, 0xed, 0x2e, 0xcb, 0x2e,
	0x7a, 0x86, 0x57, 0xfb, 0xd0, 0xb3, 0x1e, 0x34, 0xc4, 0x6b, 0x7d, 0x68, 0xd8, 0x83, 0x9e, 0xe3,
	0x61, 0x1f, 0x7a, 0xae, 0xde, 0xdb, 0x53, 0x68, 0x5c, 0x15, 0xd9, 0xef, 0x15, 0xc5, 0xeb, 0xe6,
	0xbd, 0xdd, 0x16, 0x7c, 0xd0, 0x3e, 0xf4, 0x3d, 0x60, 0x73, 0xfa, 0xbd, 0xd9, 0x73, 0x3a, 0xa4,
	0x75, 0xdb, 0xd6, 0x5f, 0xcf, 0x9d, 0x55, 0xfe, 0x04, 0x07, 0xf7, 0xd9, 0x63, 0xfc, 0x51, 0xf5,
	0x86, 0x56, 0xef, 0x4a, 0xe6, 0xaa, 0x3f, 0xc0, 0x8f, 0xb0, 0xe7, 0x52, 0x52, 0x72, 0x79, 0x22,
	0x12, 0x4f, 0xbe, 0xa9, 0xe5, 0xb8, 0x26, 0xae, 0x1c, 0x60, 0xd5, 0xf2, 0x93, 0x60, 0x42, 0x99,
	0x0c, 0x18, 0x4b, 0x67, 0x52, 0x35, 0xc2, 0x2d, 0xf3, 0x49, 0x60, 0x9c, 0x91, 0xf1, 0x59, 0x8d,
	0x7c, 0xc5, 0x8f, 0x48, 0x19, 0xcb, 0xd9, 0xa6, 0x6a, 0xf3, 0x4c, 0xea, 0x78, 0x5b, 0x2f, 0xce,
	0x50, 0x7a, 0xae, 0x8d, 0xc3, 0xe4, 0xab, 0x6a, 0xef, 0x42, 0x8f, 0xd8, 0x98, 0xca, 0xff, 0xa0,
	0xc4, 0x3b, 0xa6, 0xf6, 0xd6, 0xfe, 0xce, 0x9a, 0xfd, 0x81, 0xa2, 0x85, 0x3a, 0x91, 0x29, 0xc6,
	0x3a, 0xaa, 0x1b, 0xa8, 0x6b, 0x63, 0x0d, 0x6f, 0x9a, 0x9b, 0xb7, 0xed, 0x5d, 0x34, 0xef, 0x4e,
	0xb9, 0x83, 0x77, 0xd8, 0x3d, 0x78, 0x1e, 0x55, 0x5f, 0xbb, 0x4b, 0x74, 0x39, 0xac, 0xbf, 0x34,
	0x2d, 0xf7, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x27, 0x9b, 0xbe, 0x77, 0xa4, 0x0a, 0x00, 0x00,
}
